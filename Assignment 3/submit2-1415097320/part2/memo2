Memo: Pathname Attack (Part 2)

1.) We know that memo.cgi runs as root with all of its permissions, since its SUID bit is set. This makes the software insecure already, since any user with access to memo.cgi can run it as though they were root. Furthermore, the software takes in a parameter specifying ANY path from which to display memos. From a URL using SSH Tunneling, this might look like localhost/cgi-bin/memo.cgi?memo=/etc/shadow. Basically, the software is not restricted to reading only memo files, but can be used to access root or other sensitive files, like /etc/shadow or /etc/passwd, etc. This "bug" is rather obvious once you read the code and see that a parameter named "memo" exists, and that it is used as a pathname. In order to fix this, I designed a system consisting of a memo-users group. All users dealing with memos should be assigned to this group, with access to the /home/memo-users directory. Inside this memo-users directory, another memo directory houses the actual memo files themselves, with the sticky bit enabled to prevent users from deleting others' memos. The root-SUID bit is obviously removed from memo.cgi. In my patch, I implemented the new /home/memo-users/memo directory as the only source from which memos populate. Furthermore, if the memo parameter contains anything other than that directory as a prefix, the entire file path is removed. Lastly, any attempts to backtrack are prevented by globally removing any "../" matches in the parameter. In my exploit, I use the default elink command to access the memo.cgi file with /etc/shadow passed in as the memo parameter. This literally grabs the contents of the file, and then saves it as shadow.txt. 

2.1) As before, this breach is serious, since it grants read access at the root level to any user of memo.cgi. Sensitive information should be changed right away. The memo.cgi software also needs to be patched and restricted to reading actual memo files without root-SUID. As described before, we accomplish this by using a memo-users folder for the new memo-users group, or anyone who needs to use the memo system. Without root-SUID, only the executing user's permissions are applied to memo.cgi. This doesn't change functionality at all, since all memos are still readable and located in the same place, /home/memo-users/memo. The sticky bit is enabled to prevent cross-deleting in a shared group. Finally, to take it a step further, the memo parameter could be escaped or restricted to alpha-numeric text so that no malicious code could be run in that way.

2.2) Even if we start with a filepath prefix, the user can execute up one or multiple levels of directories by appending /.. after the previous directory path. This is known as backtracking. For example, /root/memo/../../../../../etc/shadow would spit out sensitive information. The user could keep adding ../, which stops doing anything once the base directory is executed into, and access any files from there on. For this reason, we must disable root-SUID, disable backtracking, and use a single joined directory for all memos.

2.3) I actually created a simple script "patch2.sh" that summarizes the basic setup of the new patched software's back-end. Most commands in this script require sudo permissions. This script attempts to create the needed directories, user groups, permissions, etc. It also adds the sticky bit and removes the root-SUID bit. Finally, it traverses into the cgi-bin folder where memo.cgi is and attempts to run the patch there. 

Note that, due to its need for sudo (or sudo su -), patch2.sh may not run correctly. If it does not, please read its comments and/or try to run it manually. Note that after the patch2.sh commands are run, the exploit no longer works as intended, which is exactly what we want.
